var clientList=[{name:"Paul",age:"20",dateHourOfBirth:"2003-04-16T13:59",sex:"male",address:"Lisbon,\nPortugal",phone:"+493 3 345 44",email:"Paul@xyz.com",diagnoseDetais:[{diagnoseName:"Test Diagnosis 1 1",clientId:"1",date:"today"},{diagnoseName:"Test Diagnosis 2 1",clientId:"1",date:"yesterday"}]},{name:"Paul Abdul",age:"60",dateHourOfBirth:"1943-04-26T13:59",sex:"male",address:"Lisbon",phone:"+493 5363543 345 44",email:"PaulAbdul@xyz.com",diagnoseDetais:[{diagnoseName:"Test Diagnosis 1 2",clientId:"2",date:"today"},{diagnoseName:"Test Diagnosis 2 2",clientId:"2",date:"yesterday"}]},{name:"Matilda",age:"45",dateHourOfBirth:"1974-04-05T13:59",sex:"female",address:"Lisbon",phone:"+493 94932 345 44",email:"Matilda@xyz.com",diagnoseDetais:[{diagnoseName:"Test Diagnosis 1 3",clientId:"3",date:"today"},{diagnoseName:"Test Diagnosis 2 3",clientId:"3",date:"yesterday"}]}];var DataModule=function(e,f){var o={initialize:A,createAllTables:d,dropAllTables:p,getClientList:l,getColumnData:q,insertClientData:x,updateClientData:a,insertDiagnoseData:h,insertTestData:r,getDiagnoseList:g,clearTable:n,getData:k,updateData:m,executeQuery:u,execute:t,executeAll:j,CLASSIFICATION:"classification"};var y=null,v={createClientTable:"CREATE TABLE IF NOT EXISTS CLIENT_DATA (id INTEGER PRIMARY KEY, name, age, dateHourOfBirth, sex, address, phone, email)",insertClientData:"INSERT INTO CLIENT_DATA (name, age, dateHourOfBirth, sex, address, phone, email)  VALUES (?, ?, ?, ?, ?, ?, ?)",dropClientTable:"DROP TABLE CLIENT_DATA",createDiagnoseTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_DATA (id INTEGER PRIMARY KEY, diagnoseId INTEGER, controlId, controlLabel, controlType, controlValue, classification)",insertDiagnoseData:"INSERT INTO DIAGNOSE_DATA (diagnoseId, controlId, controlLabel, controlType, controlValue)  VALUES (?, ?, ?, ?, ?)",createClassificationTable:"CREATE TABLE IF NOT EXISTS CLASSIFICATION_DATA (id INTEGER PRIMARY KEY, classificationName)",insertClassificationData:"INSERT INTO CLASSIFICATION_DATA (classificationName) VALUES (?)",createDiagnoseControlsTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_CONTROLS_DATA  (id INTEGER PRIMARY KEY, diagnoseName, diagnoseControlFile, diagnoseControlFileContent)",insertDiagnoseControsData:"INSERT INTO DIAGNOSE_CONTROLS_DATA (diagnoseName, diagnoseControlFile, diagnoseControlFileContent)VALUES (?, ?, ?)"};function A(){y=openDatabase("DataDB","1.0","Data DB",2*1024*1024,function(B){},function(B){alert("Error: DB creation : "+B.message)})}var z={clientData:{tableName:"CLIENT_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS CLIENT_DATA (id INTEGER PRIMARY KEY, name, age, dateHourOfBirth, sex, address, phone, email)",selectData:"SELECT * FROM CLIENT_DATA",selectDataWhere:"SELECT * FROM CLIENT_DATA WHERE id=?",insertData:"INSERT INTO CLIENT_DATA (name, age, dateHourOfBirth, sex, address, phone, email) VALUES (?, ?, ?, ?, ?, ?, ?)",deleteData:"DELETE FROM CLIENT_DATA WHERE id=?",dropTable:"DROP TABLE CLIENT_DATA"}},clientDiagnoseData:{tableName:"CLIENT_DIAGNOSE_DATA",columnMapping:{id:"uniqueId","Client ID":"clientId"},queries:{createTable:"CREATE TABLE IF NOT EXISTS CLIENT_DIAGNOSE_DATA (id INTEGER PRIMARY KEY, clientId INTEGER, diagnoseIdForClient, diagnoseName, date)",selectData:"SELECT * FROM CLIENT_DIAGNOSE_DATA",selectDataWhere:"SELECT * FROM CLIENT_DIAGNOSE_DATA WHERE clientId=?",selectDataWhereId:"SELECT * FROM CLIENT_DIAGNOSE_DATA WHERE id=?",insertData:"INSERT INTO CLIENT_DIAGNOSE_DATA (clientId, diagnoseIdForClient, diagnoseName, date) VALUES (?, ?, ?, ?)",getCountWhere:"SELECT COUNT(1) FROM CLIENT_DIAGNOSE_DATA WHERE clientId=?",deleteData:"DELETE FROM CLIENT_DIAGNOSE_DATA WHERE id=?",dropTable:"DROP TABLE CLIENT_DIAGNOSE_DATA"}},diagnoseData:{tableName:"DIAGNOSE_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_DATA (id INTEGER PRIMARY KEY, diagnoseId INTEGER, controlId, controlLabel, controlType, controlValueLabel, controlValue, classification)",selectData:"SELECT * FROM DIAGNOSE_DATA",selectDataWhere:"SELECT * FROM DIAGNOSE_DATA WHERE diagnoseId=?",insertData:"INSERT INTO DIAGNOSE_DATA (diagnoseId, controlId, controlLabel, controlType, controlValueLabel, controlValue) VALUES (?, ?, ?, ?, ?, ?)",deleteData:"DELETE FROM DIAGNOSE_DATA WHERE diagnoseId=?",deleteDataWhere:"DELETE FROM DIAGNOSE_DATA WHERE controlId=(?||'%')",dropTable:"DROP TABLE DIAGNOSE_DATA"}},classification:{tableName:"CLASSIFICATION_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS CLASSIFICATION_DATA (id INTEGER PRIMARY KEY, classificationName, parentClassificationId INTEGER)",selectData:"SELECT id classificationId, classificationName, parentClassificationId FROM CLASSIFICATION_DATA",insertData:" INSERT INTO CLASSIFICATION_DATA (classificationName, parentClassificationId) VALUES (?, ?) ",deleteData:"DELETE FROM CLASSIFICATION_DATA WHERE id=?",deleteDataWhereParent:"DELETE FROM CLASSIFICATION_DATA WHERE parentClassificationId=?",dropTable:"DROP TABLE CLASSIFICATION_DATA"}},diagnoseClassification:{tableName:"DIAGNOSE_CLASSIFICATION",queries:{createTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_CLASSIFICATION (id INTEGER PRIMARY KEY, diagnoseItemId INTEGER, classificationId INTEGER)",selectData:"SELECT * FROM DIAGNOSE_CLASSIFICATION",selectDataWhere:"SELECT * FROM DIAGNOSE_CLASSIFICATION WHERE diagnoseItemId=? order by classificationId",getCountWhere:"SELECT COUNT(1) FROM DIAGNOSE_CLASSIFICATION WHERE diagnoseItemId=?",insertData:"INSERT INTO DIAGNOSE_CLASSIFICATION (diagnoseItemId, classificationId) VALUES (?, ?)",deleteData:"DELETE FROM DIAGNOSE_CLASSIFICATION WHERE id=?",deleteDataWhere:"DELETE FROM DIAGNOSE_CLASSIFICATION WHERE diagnoseItemId=?",dropTable:"DROP TABLE DIAGNOSE_CLASSIFICATION"}},diagnoseControls:{tableName:"DIAGNOSE_CONTROLS_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_CONTROLS_DATA (id INTEGER PRIMARY KEY, tabIndex INTEGER, subTabIndex INTEGER, diagnoseName, subTabName, diagnoseControlFile, diagnoseControlFileContent, classify)",selectData:"SELECT * FROM DIAGNOSE_CONTROLS_DATA",selectDataWhere:"SELECT * FROM DIAGNOSE_CONTROLS_DATA WHERE tabIndex=?",insertData:" INSERT INTO DIAGNOSE_CONTROLS_DATA (tabIndex, subTabIndex, diagnoseName, subTabName, diagnoseControlFile, diagnoseControlFileContent, classify) VALUES (?, ?, ?, ?, ?, ?, ?) ",updateData:"UPDATE DIAGNOSE_CONTROLS_DATA set diagnoseName=?, subTabName=?, classify=? where id=?",updateFileData:"UPDATE DIAGNOSE_CONTROLS_DATA set tabIndex=?, subTabIndex=?, diagnoseName=?, subTabName=?, diagnoseControlFile=?, diagnoseControlFileContent=?, classify=? where id=?",deleteDataWhere:"DELETE FROM DIAGNOSE_CONTROLS_DATA WHERE tabIndex=?",dropTable:"DROP TABLE DIAGNOSE_CONTROLS_DATA"}},clientAppointmentsData:{tableName:"CLIENT_APPOINTMENTS_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS CLIENT_APPOINTMENTS_DATA (id INTEGER PRIMARY KEY, clientId, date, attended)",selectData:"SELECT * FROM CLIENT_APPOINTMENTS_DATA",selectDataWhere:"SELECT * FROM CLIENT_APPOINTMENTS_DATA WHERE CLIENTID=?",insertData:"INSERT INTO CLIENT_APPOINTMENTS_DATA (clientId, date, attended) VALUES (?, ?, ?)",updateData:"UPDATE CLIENT_APPOINTMENTS_DATA set attended=? where id=?",dropTable:"DROP TABLE CLIENT_APPOINTMENTS_DATA"}}};var b={clientAppointmentsData:{tableName:"CLIENT_APPOINTMENTS_DATA",createTable:{type:"createTable","default":"CREATE TABLE IF NOT EXISTS CLIENT_APPOINTMENTS_DATA (id INTEGER PRIMARY KEY, clientId, date, attended)"},select:{type:"createTable","default":"SELECT * FROM CLIENT_APPOINTMENTS_DATA",all_where_clientid:"SELECT * FROM CLIENT_APPOINTMENTS_DATA WHERE CLIENTID=?"},insert:{type:"insert","default":"INSERT INTO CLIENT_APPOINTMENTS_DATA (clientId, date, attended) VALUES (?, ?, ?)"},update:{type:"update",attended:"UPDATE CLIENT_APPOINTMENTS_DATA set attended=? where id=?"}}};function k(C,B,D){if(B===f){B=[]}y.transaction(function(E){E.executeSql(w(C,"selectData"),[],function(I,H){var G=[];for(var F=0;F<H.rows.length;F++){G[F]=H.rows.item(F)}D.apply(this,[G])},function(F,G){alert("Error:"+G.message)})})}function t(E,D,C,F,B){if(C===f){C=[]}y.transaction(function(G){var H=w(E,D);G.executeSql(H,C,function(M,L){var K=[];for(var J=0;J<L.rows.length;J++){K[J]=L.rows.item(J)}var I={};if(L.rowsAffected>0&&B!=="delete"&&B!="update"){I.insertId=L.insertId}if(K.length>0){I.rows=K}if(F!==f){F.apply(this,[I])}},function(I,J){alert("Error:"+J.message)})},function(){console.log("error")},function(H,G){})}function u(K){var E=K.tableQueryReference[0],H=K.tableQueryReference[1],C=K.tableQueryReference[2],D=K.queryParametersArray,G=K.callback,F=K.batchExecution||false,I=K.deferred||e.Deferred();var J=null;if(F||C!=="insert"){J=[]}function B(N,M){if(M.rowsAffected>0&&C!=="delete"){if(F){J.push(M.insertId)}else{J=M.insertId}}else{for(var L=0;L<M.rows.length;L++){J[L]=M.rows.item(L)}}if(G!==f){G.apply(this,[J])}}y.transaction(function(L){if(F){for(i=0;i<D.length;i++){L.executeSql(w(E,H),D[i],B,function(M,N){alert("Error:"+N.message)})}}else{L.executeSql(w(E,H),D,B,function(M,N){alert("Error:"+N.message)})}},function(){},function(){if(I!==f&&I.resolve!==f){I.resolve(J)}});return I}function j(D){var F=D.tableReference,E=D.queryReference,H=D.queryParametersArray,I=D.callback,B=D.queryType,C=D.deferred;var G=[];y.transaction(function(J){for(i=0;i<H.length;i++){J.executeSql(w(F,E),H[i],function(M,L){if(L.rowsAffected>0&&B!=="delete"){G.push(L.insertId)}else{for(var K=0;K<L.rows.length;K++){G[K]=L.rows.item(K)}}if(I!==f){I.apply(this,[G])}},function(K,L){alert("Error:"+L.message)})}},function(){console.log("error")},function(){if(C!==f&&C.resolve!==f){C.resolve(G)}})}function s(B){return z[B].tableName}function w(B,C){return z[B].queries[C]}function d(B){y.transaction(function(C){C.executeSql(w("clientData","createTable"),[],function(){if(B===f){return}B.apply(this,["Client Table created"])});C.executeSql(w("clientDiagnoseData","createTable"),[],function(){if(B===f){return}B.apply(this,["Client Diagnose Data Table created"])});C.executeSql(w("diagnoseData","createTable"),[],function(){if(B===f){return}B.apply(this,["Diagnose data Table created"])});C.executeSql(w("classification","createTable"),[],function(){if(B===f){return}B.apply(this,["Classification Table created"])});C.executeSql(w("diagnoseClassification","createTable"),[],function(){if(B===f){return}B.apply(this,["Diagnose Classification Data Table created"])});C.executeSql(w("diagnoseControls","createTable"),[],function(){if(B===f){return}B.apply(this,["Diagnose Controls Table created"])});C.executeSql(w("clientAppointmentsData","createTable"),[],function(){if(B===f){return}B.apply(this,["Client Appointments Data Table created"])})})}function p(){y.transaction(function(B){B.executeSql(w("clientData","dropTable"),[],function(){});B.executeSql(w("clientDiagnoseData","dropTable"),[],function(){});B.executeSql(w("diagnoseData","dropTable"),[],function(){});B.executeSql(w("classification","dropTable"),[],function(){});B.executeSql(w("diagnoseControls","dropTable"),[],function(){});B.executeSql(w("diagnoseClassification","dropTable"),[],function(){});B.executeSql(w("clientAppointmentsData","dropTable"),[],function(){})})}function n(B,C){y.transaction(function(D){D.executeSql("DELETE FROM "+B,[],function(){if(C===f){return}C.apply(this,["Table cleared"])})})}function l(){y.transaction(function(B){B.executeSql("SELECT * FROM CLIENT_DATA WHERE name like '%' || ? || '%'",["Paul"],function(F,E){var D=[];for(var C=0;C<E.rows.length;C++){D[C]=E.rows.item(C)}},function(C,D){alert("Error:"+D.message)})})}function g(B,C){y.transaction(function(D){D.executeSql("SELECT * FROM DIAGNOSE_DATA WHERE diagnoseId=?",[B],function(H,G){var F=[];for(var E=0;E<G.rows.length;E++){F[E]=G.rows.item(E)}C.apply(this,[F])},function(E,F){alert("Error:"+F.message)})})}function q(D,B,E){var C=[];y.transaction(function(G){var H=null;var F=[];if(B===f||B===null||B===""){H="SELECT "+D.join(", ")+" FROM CLIENT_DATA"}else{H="SELECT "+D.join(", ")+" FROM CLIENT_DATA WHERE name like '%' || ? || '%'";F=[B]}G.executeSql(H,F,function(L,K){var J=[];for(var I=0;I<K.rows.length;I++){J[I]=K.rows.item(I)}E.apply(this,[J])},function(I,J){alert("Error:"+J.message)})});return C}function r(B,C){for(c in B){x({data:B[c],callback:C})}}function a(C){var B=C.data;y.transaction(function(D){D.executeSql("UPDATE CLIENT_DATA set name=?, age=?, dateHourOfBirth=?, sex=?, address=?, phone=?, email=? where id=?",[B.name,B.age,B.dateHourOfBirth,B.sex,B.address,B.phone,B.email,B.id],function(F,E){if(C.callback===f){return}C.callback.apply(this,["Data update in table"])},function(){console.log("error insert : "+B)})})}function m(D,C,B,E){if(B===f){B=[]}y.transaction(function(F){F.executeSql(w(D,C),B,function(H,G){if(E!==f){E.apply(this,[])}},function(G,H){alert("Error:"+H.message)})})}function x(C){var B=C.data;var D=C.callback;y.transaction(function(E){if(C.checkunique!==f&&C.checkunique===true){E.executeSql("SELECT * FROM CLIENT_DATA WHERE NAME=?  AND AGE=?AND DATEHOUROFBIRTH=?AND SEX=?AND ADDRESS=?AND PHONE=?AND EMAIL=?",[B.name,B.age,B.dateHourOfBirth,B.sex,B.address,B.phone,B.email],function(F){if(F.length<=0){E.executeSql(v.insertClientData,[B.name,B.age,B.dateHourOfBirth,B.sex,B.address,B.phone,B.email],function(H,G){console.log("success insert e : "+H);if(D===f){return}D.apply(this,[G.insertId,"Data Inserted in table"])},function(){console.log("error insert : "+B)})}},function(){console.log("error insert : "+B)})}else{E.executeSql(v.insertClientData,[B.name,B.age,B.dateHourOfBirth,B.sex,B.address,B.phone,B.email],function(G,F){if(D===f){return}D.apply(this,[F.insertId,"Data Inserted in table"])},function(){console.log("error insert : "+B)})}})}function h(B,F,D,E,C,G){y.transaction(function(H){H.executeSql(v.insertDiagnoseData,[B,F,D,E,C],function(){if(G===f){return}G.apply(this,["Data Inserted in table"])},function(I,J){console.log("error insert into diagnose : "+J.message)})})}return o}(jQuery);var FileModule=function(d,e){var b={initialize:c,readFile:a};function c(){}function a(f,g){fr=new FileReader();fr.onload=function(h){if(g===e){return}g.apply(this,[h.target.result])};fr.readAsText(f)}return b}(jQuery);var TabsModule=function(d){var m={buildTabSubTabData:b,getTabRoot:function(){return p},getAllTabSubtabData:o,getTabSubtabArray:function(){return k},getTabDetails:f,getTabSubtabDetails:q,getPreviousSubtabsIdArray:function(){return r},removeTab:j,removeSubTab:l};var h=0,a,k=[],c={},n="diagnoseTab",e="diagnoseSubTab",p={type:"TabRoot",children:[]},s=[],r=[];function o(){r=s;s=[];var t="";p={type:"TabRoot",children:[]};d.each(k,function(x,w){var B=n+w.tabIndex;var A=w.tabName;var v={type:"Tabs",id:B,name:A,tabHierarchyHeadings:A,children:[]};if(w.subTabsArray.length>1){var z=w.subTabsArray;var y=null;var u=[];d.each(z,function(C,F){var D=F.subTabName;var E=n+F.tabIndex+e+F.subTabIndex;u.push({type:"Tabs",id:E,name:D,tabHierarchyHeadings:A+" : "+F.subTabName,children:[F.controls]})});v.children=u}else{v.children.push(w.subTabsArray[0].controls)}p.children.push(v)});return p}function g(u){var t=null;angular.forEach(u.children[0].children,function(w,x){if(w.type==="Content"){t=w;return false}});return t}function b(H){var w=H.tabIndex,A=H.subTabIndex,z=H.fileName,y=H.fileContent,D=H.tabName,B=H.subTabName,F=H.jsonData,t=H.insertId;var x=g(F);var v=n+w;var u=e+A;var G=z.replace(".json","");controlFileName=v+u+z;var E=c[w];if(E===undefined){E={};E.tabIndex=w;c[w]=E;k.push(E)}if(E.subTabsArray===undefined){E.subTabsArray=[];E.subTabIndexer={}}var C=E.subTabIndexer[A];if(C===undefined){C={};C.insertId=t;C.tabIndex=w;C.subTabIndex=A;E.subTabIndexer[A]=C;E.subTabsArray.push(C)}C.jsonData=F;C.controls=x;C.fileName=z;C.subTabName=B;E.tabName=D}function j(t){c[t]=undefined;for(i=0;i<k.length;i++){if(k[i].tabIndex===t){k.splice(i,1)}}}function l(t,u){c[t].subTabIndexer[u]=undefined;for(i=0;i<k[t].subTabsArray.length;i++){if(k[t].subTabsArray[i].tabIndex===t){k[t].subTabsArray.splice(i,1)}}}function f(t){return c[t]}function q(t,u){return c[t].subTabIndexer[u]}return m}(jQuery);var GridBuilder=function(c,e){var a={getGridClass:d,setGridControlLabels:b};function d(g,f){if(g===null){return}var j=0;var h="";var i=g.length;c.each(g,function(k,l){if(l.type==="Block"){if(l.properties!==e){switch(l.properties.subtype){case"a":h="solo";break;case"b":h="a";break;case"c":h="b";break;case"d":h="c";break;case"e":h="d";break}}else{h="solo"}}if(k>=i/f-1){return false}});return"ui-grid-"+h}function b(j){var k=j.children,n=j.properties.rows,l=j.properties.columns||2,h=[],o=[],g=0;for(var f=0;f<n;f++){for(var m=0;m<l;m++){var i=k[g];if(i.type==="Block"){if(m===0&&i.children!==e&&i.children[0].type==="Text"){o[f]=i.children[0].properties.text}else{if(f===0&&i.children!==e&&i.children[0].type==="Text"){h[m]=i.children[0].properties.text}else{if(f===0&&i.children===e){h[m]=""}else{if(m!==0&&i.children!==e){c.each(i.children,function(p,q){if(q.type==="SelectMenu"){q.properties.options.label=o[f]+(h[m]!==e?(" : "+h[m]):"")}})}}}}g++}}}}return a}(jQuery);var AppointmentsModule=function(g,h,e){var i={addAppointment:b,editAppintments:f,saveAppointments:c,addAllAppointmentsForClient:a,appointmentsPanelExpandEvent:d};function b(j,l,k){l=l||g("#appointmentDate"+j).val();k=(k||"false")==="false"?false:true;if(l===""){return}DataModule.execute("clientAppointmentsData","insertData",[j,l,k],function(m){var n='<input style="" class="js-appointment-status" type="checkbox" data-role="flipswitch" name="flip-checkbox-'+j+'" data-appointment-id="'+m.insertId+'" data-mini="true" data-on-text="Attended"'+(k?" checked ":"")+' data-off-text="Not Attended" data-wrapper-class="custom-size-flipswitch" disabled="disabled">';var o=g('<li> <span href="#" style="width: 60%; display: inline-block;">'+l+"</span> "+n+" </li>");g("#appointmentsList"+j).append(o).listview("refresh").trigger("updatelayout").find("li input").flipswitch()})}function f(j){if(g("#appointmentsList"+j+" li").length<=0){return}g("#editAppointmentsButton"+j).hide();g('.js-appointment-status[name="flip-checkbox-'+j+'"]').flipswitch("enable");g("#saveAppointmentsButton"+j).show()}function c(j){g('.js-appointment-status[name="flip-checkbox-'+j+'"]').flipswitch("disable").each(function(n,m){var l=g(m).data("appointment-id");var k=g(m).prop("checked");DataModule.execute("clientAppointmentsData","updateData",[k,l],function(){},"update")});g("#saveAppointmentsButton"+j).hide();g("#editAppointmentsButton"+j).show()}function a(j){DataModule.execute("clientAppointmentsData","selectDataWhere",[j],function(k){if(k.rows===e){return}g.each(k.rows,function(m,l){b(j,l.date,l.attended)})})}function d(j){a(j)}return i}(jQuery,_);var ClientFormModule=function(){var b={onClientFormChange:e,resetAndEnableClientForm:a,setClientFormValues:d,enableDisableClientForm:c};function e(f){if(f===undefined){f=""}$("#saveClientButton"+f).removeClass("ui-disabled js-disabled")}function a(){$("#clientId").val("");$("#clientNameInput").val("").textinput("enable");$("#clientAgeInput").val("").textinput("enable");$("#birthdateAndHourInput").val("").textinput("enable");$("#clientGender").val("").selectmenu("refresh").selectmenu("enable");$("#clientAddressInput").val("").textinput("enable");$("#clientPhoneInput").val("").textinput("enable");$("#clientEmailInput").val("").textinput("enable")}function d(f){$("#clientId").val(f.id).data("current-value",f.id);$("#clientNameInput").val(f.name).data("current-value",f.name);$("#clientAgeInput").val(f.age).data("current-value",f.age);$("#birthdateAndHourInput").val(f.dateHourOfBirth).data("current-value",f.dateHourOfBirth);$("#clientGender").val(f.sex).selectmenu("refresh").data("current-value",f.sex);$("#clientAddressInput").val(f.address).data("current-value",f.address);$("#clientPhoneInput").val(f.phone).data("current-value",f.phone);$("#clientEmailInput").val(f.email).data("current-value",f.email)}function c(g,f){if(f===undefined){f=""}$("#clientNameInput"+f).textinput(g);$("#clientAgeInput"+f).textinput(g);$("#birthdateAndHourInput"+f).textinput(g);$("#clientGender"+f).selectmenu("refresh").selectmenu(g);$("#clientAddressInput"+f).textinput(g);$("#clientPhoneInput"+f).textinput(g);$("#clientEmailInput"+f).textinput(g)}return b}(jQuery);var ClientTabFunctionality = function ($, undefined) {

  var self = {
    initialize: _initialize,
    makeActive: _makeActive,
    makeInactive: _makeInactive,
    resetTab: _resetTab,
    getHtmlFromDiagnoseList: _getHtmlFromDiagnoseList,
    updateDiagnoseList: _updateDiagnoseListOnUI,
    updateUIandDBWithDiagnoseAndClassificationData: _updateUIandDBWithDiagnoseAndClassificationData,
    insertCategorizationInfo: _insertCategorizationInfo,
    getSelectedClient: function () { return _selectedClientId; }
  };

  function _initialize() {

    _$clientSearchResults = $("#autocomplete");
    _$diagnoseTabHeader = $('#diagnoseTabHeader');
    _$mainTabs = $("#tabs");
    _$diagnoseId = $('#diagnose #diagnoseId');
    _$diagnoseIdForClient = $('#diagnose #diagnoseIdForClient');
    _$clientTabHeader = $('#clientTabHeader');
    _$newClientArea = $('#newClientArea');
    _$clientId = $('#client #clientId');

    _bindEvents();
  }

  var _$clientSearchResults = null,
      _$diagnoseTabHeader = null,
      _$mainTabs = null,
      _$diagnoseIdForClient = null,
      _$diagnoseId = null,
      _$clientTabHeader = null,
      _$clientId = null,
      _$newClientArea = null,
      _IsNewClient = false,
      _selectedClientId = "";

  function _bindEvents() {
    var clientFormSelectors = 'input[type="text"], input[type="number"], '
            + 'input[type="email"], input[type="datetime-local"], textarea';

    _$newClientArea.on('keyup', clientFormSelectors, function() {
      ClientFormModule.onClientFormChange();
      $(this).addClass('js-control-value-changed');
    });

    _$newClientArea.on('change', 'select, input[type="datetime-local"]', function() {
      ClientFormModule.onClientFormChange();
      $(this).addClass('js-control-value-changed');
    });

    $('#newClientButton').on('click', function () {
      $('#newClientArea').slideDown();
      $('#saveClientButton').show().addClass("ui-disabled js-disabled");
      $('#editClientButton').hide();

      _IsNewClient = true;

      ClientFormModule.resetAndEnableClientForm();
    });

    $('#saveClientButton').on('click', function () {

      if ($(this).hasClass('js-disabled')) return;

      _saveClientDetailsButtonAction();
    });

    $('#editClientButton').on('click', function() {
      ClientFormModule.enableDisableClientForm('enable');
      $('#saveClientButton').show().removeClass("ui-disabled js-disabled");
      $(this).hide();
    });

    $('#cancelChangesClientButton').on('click', function () {
      _$newClientArea.slideUp();
    });

    $('#clearSearchButton').on('click', function () {
      var $ulAutocomplete = $("#autocomplete");
      $ulAutocomplete.html('').listview("refresh").trigger("updatelayout");
    });

    $('#fetchAllButton').on('click', function () {
      _fetchClientData("");
      _selectedClientId = "";
    });

    _$clientSearchResults.on("filterablebeforefilter", function (e, data) {
      var $input = $(data.input);
      _fetchClientData($input.val());

      _selectedClientId = "";
    });

    _$clientSearchResults.on('click', '.js-add-new-diagnose-button', function () {
      _addNewDiagnoseForClient($(this).data('client-id'));
    });

    _$clientSearchResults.on('click', '.js-delete-client-button', function () {
      var $clientDetailsContainer = $(this).closest('.js-client-list-item')
      var clientId = $clientDetailsContainer.data("id");
      DataModule.execute("clientData", "deleteData", [clientId], function () {
        $clientDetailsContainer.slideUp(1000, function () { $(this).remove() });
        ClientFormModule.resetAndEnableClientForm();
        _$newClientArea.slideUp();
      }, "delete");
    });

    _$clientSearchResults.on('click', '.js-edit-diagnose-button', function () {
      var $editDiagnoseButton = $(this);
      var $jsDiagnoseItemContainer = $editDiagnoseButton.closest('.js-diagnose-item-container');
      var clientId = $jsDiagnoseItemContainer.data('client-id');
      var diagnoseId = $jsDiagnoseItemContainer.data('diagnose-id');

      var $diagnoseList = $('#diagnoseList' + clientId + diagnoseId);
      var diagnoseItems = $diagnoseList.data('diagnose-info');

      _$diagnoseId.val(diagnoseId);

      DiagnoseTabFunctionality.resetForm(diagnoseItems);

      var categoriesInfoPromise = DiagnoseTabFunctionality
                                    .getDiagnoseClassificationUtilitiesService()
                                    .setDiagnoseItemsWithDBValues(diagnoseItems, "edit");

      categoriesInfoPromise.then(function () {
        DiagnoseTabFunctionality.loadDiagnoseDataToHtml(clientId, diagnoseId, diagnoseItems);
        DiagnoseTabFunctionality.makeActive();
      });
      DataModule.execute("clientDiagnoseData", "selectDataWhereId", [diagnoseId], function (result) {
        _$diagnoseIdForClient.val(result.rows[0].diagnoseIdForClient);
      });
    });

    _$clientSearchResults.on('click', '.js-classify-diagnose-button', function () {
      var $diagnoseItemContainer =  $(this).closest('.js-diagnose-item-container');

      var clientId = $diagnoseItemContainer.data('client-id');

      var diagnoseId = $diagnoseItemContainer.data('diagnose-id');

      var $diagnoseList = $('#diagnoseList' + clientId + diagnoseId);

      var diagnoseItemsRows = $diagnoseList.data('diagnose-info');
      var diagnoseName = $diagnoseList.data('diagnose-name');

      FunctionalityModule.getSharedDataService().setDiagnoseItems(diagnoseItemsRows);

      var categoriesInfoPromise = DiagnoseTabFunctionality
                                    .getDiagnoseClassificationUtilitiesService()
                                    .setDiagnoseItemsWithDBValues(diagnoseItemsRows, "classify")

      // console.log(diagnoseItemsRows);

      ClassifyTabFunctionality.editDiagnoseItemsCategory(clientId, diagnoseId, diagnoseName,
                                                        diagnoseItemsRows, categoriesInfoPromise);
    });

    _$clientSearchResults.on('click', '.js-delete-diagnose-button', function () {
      var $deleteDiagnoseButton = $(this);
      var $jsDiagnoseItemContainer = $deleteDiagnoseButton.closest('.js-diagnose-item-container');
      var clientId = $jsDiagnoseItemContainer.data('client-id');
      var diagnoseId = $jsDiagnoseItemContainer.data('diagnose-id');
      _deleteDiagnoseData(diagnoseId, $jsDiagnoseItemContainer)
    });

    _$clientSearchResults.on('click', '.js-edit-client-button', function () {
      var clientId = $(this).data('client-id');

      _IsNewClient = false;

      var rowIndex = $('#clientSearchItem' + clientId).data('row-index');
      _$newClientArea.slideDown('fast');

      var row = _$clientSearchResults.data("rows")[rowIndex];
      ClientFormModule.setClientFormValues(row);

      ClientFormModule.enableDisableClientForm('enable');
      $('#saveClientButton').show().addClass("ui-disabled js-disabled");
      $('#editClientButton').hide();

      $.mobile.silentScroll(0);
    });

    _$clientSearchResults.on('keyup', clientFormSelectors, function () {
      ClientFormModule.onClientFormChange($(this).data('client-id'));
      $(this).addClass('js-control-value-changed');
    });

    _$clientSearchResults.on('change', 'select, input[type="datetime-local"]', function() {
      ClientFormModule.onClientFormChange($(this).data('client-id'));
      $(this).addClass('js-control-value-changed');
    });

    _$clientSearchResults.on('click', '.js-add-appointment', function () {
      var clientId = $(this).data('client-id');
      AppointmentsModule.addAppointment(clientId);
    });

    _$clientSearchResults.on('click', '.js-edit-appointments', function () {
      var clientId = $(this).data('client-id');
      _editAppintments(clientId);
    });

    _$clientSearchResults.on('click', '.js-save-appointments', function () {
      var clientId = $(this).data('client-id');
      AppointmentsModule.saveAppointments(clientId);
    });
  }

  function _saveClientDetailsButtonAction() {
    var clientId = $('#clientId').val();

    if (_IsNewClient === undefined || _IsNewClient === false) {
      _$newClientArea.slideUp();
      $('.js-control-value-changed').each(function (i, changedControl) {
        $('#' + $(changedControl).attr('id') + clientId)
            .html($(changedControl).val())
            .data('current-value');

        $(changedControl).removeClass('js-control-value-changed');
      });
    }

    _insertOrUpdateClientData({
      "id": clientId,
      "name": $('#clientNameInput').val(),
      "age": $('#clientAgeInput').val(),
      "dateHourOfBirth": $('#birthdateAndHourInput').val(),
      "sex": $('#clientGender').val(),
      "address": $('#clientAddressInput').val(),
      "phone": $('#clientPhoneInput').val(),
      "email": $('#clientEmailInput').val()
    }, function (newClientId) {
      $('#clientId').val(newClientId);
    });
    ClientFormModule.enableDisableClientForm('disable');

    DataModule.execute("clientData", "selectDataWhere", [clientId],
                       function (result) {

      var rows = result.rows;

      _$clientSearchResults.data("rows", rows);
    });

    $('#saveClientButton').hide();
    $('#editClientButton').show();
  }

  function _deleteDiagnoseData (diagnoseId, $jsDiagnoseItemContainer) {
    DataModule.execute("diagnoseData", "selectDataWhere", [diagnoseId], function (results) {
      var diagnoseItems = results.rows;

      if (diagnoseItems !== undefined) {
        $.each(diagnoseItems, function (i, item) {
          DataModule.execute("diagnoseClassification", "deleteDataWhere", [item.id], function () {
          }, "delete");
        });
      }

      DataModule.execute("diagnoseData", "deleteData", [diagnoseId], function () {
        DataModule.execute("clientDiagnoseData", "deleteData", [diagnoseId], function () {
          $jsDiagnoseItemContainer.slideUp(1000, function () { $(this).remove() });
        }, "delete");
      }, "delete");
    });
  }

  function _makeActive() {
    _$mainTabs.tabs("option", "active", 0);
    $("#mainTabHeader", _$mainTabs).find('.ui-btn-active').removeClass('ui-btn-active');
    _$clientTabHeader.addClass('ui-btn-active').removeClass('ui-disabled');
  }

  function _makeInactive() {
    _$clientTabHeader.removeClass('ui-btn-active');
    _$clientTabHeader.addClass('ui-disabled');
  }

  function _resetTab() {
    ClientFormModule.resetAndEnableClientForm();
    _$clientSearchResults.html('');
  }

  function _addNewDiagnoseForClient(cllientId) {

    //var diagnoseItems = FunctionalityModule.getSharedDataService().getDiagnoseItems();

    DiagnoseTabFunctionality.resetForm();

    DataModule.execute("clientDiagnoseData", "getCountWhere", [cllientId], function (result) {
      _$diagnoseIdForClient.val(result.rows[0]["COUNT(1)"] + 1);
    });

    DiagnoseTabFunctionality.setDiagnoseClientId(cllientId);

    DiagnoseTabFunctionality.makeActive();
  }

  function _insertOrUpdateClientData(clientData, callback) {
    var clientId = clientData.id;
    if (clientId === "") {
      DataModule.insertClientData({
        "data": clientData,
        "callback": function(clientId, msg) {
          callback.apply(this, [clientId]);
        }
      });
    } else {
      DataModule.updateClientData({
        "data": clientData,
        "callback": function(id, msg) {
        }
      });
    }
  }

  function _fetchClientData(clientId) {

    DataModule.getColumnData(["*"], clientId, function (rows) {

      _$clientSearchResults.html($.map(rows, function(r, i) {

        var panelHtml = getHtmlFromTemplate('#collapsiblePanelForClientTemplate', {
          "properties": {
            "heading": r.name,
            "clientId": r.id,
            "personalData" : [r]
          }
        });

        return '<li id="clientSearchItem' + r.id + '" class="js-client-list-item" data-id="' + r.id
              + '" data-row-index="' + i + '"> ' + panelHtml+ ' </li>';
      }).join(''));

      _$clientSearchResults.data("rows", rows).listview("refresh").trigger("updatelayout");

      _collapsiblePanelExpandEvent();

      //$('#defaultPage').enhanceWithin();
    });
  }

  function _collapsiblePanelExpandEvent() {
    $('.js-client-details', _$clientSearchResults).data("details-populated", false).collapsible().collapsible({
        expand: function(event, ui) {

          var $clientCollapsible = $(this);
          $('li', _$clientSearchResults).not($clientCollapsible.closest('.js-client-list-item')).remove();
          var rowIndex = $clientCollapsible.closest('li.js-client-list-item').data('row-index');

          var row = _$clientSearchResults.data("rows")[rowIndex];

          if ($clientCollapsible.data("details-populated") === true)
            return;

          var clientId = $clientCollapsible.data("client-id");

          _selectedClientId = clientId;

          AppointmentsModule.appointmentsPanelExpandEvent(clientId);

          DataModule.execute("clientDiagnoseData", "selectDataWhere", [clientId], function (results) {

            var rows = results.rows;

            if (rows === undefined) return;

            var allPanelHtml = $.map(rows, function (row, i) {
              return _getDiagnosePanelHtml(row.id, /** diagnose Id from CLIENT_DIAGNOSE_DATA **/
                                                    row.diagnoseName, row.clientId);
            }).join('');

            $clientCollapsible.data("details-populated", true).find('.js-diagnose-details').append(allPanelHtml);

            $.each(rows, function (i, row) {

              var diagnoseName = row.diagnoseName;

              /*** This needs implementation **/

              DataModule.execute("diagnoseData", "selectDataWhere", [row.id /** diagnose Id from CLIENT_DIAGNOSE_DATA */],
                                 function (results) {
                var diagnoseItems = results.rows;

                if (diagnoseItems === undefined) return;

                //console.log(diagnoseItems);

                $.each(diagnoseItems, function (i, item) {
                  item.diagnoseItemId = item.id;
                });

                var html = _getHtmlFromDiagnoseList(diagnoseItems);

                var $diagnoseList = $('#' + "diagnoseList" + clientId + row.id);

                $diagnoseList.data('diagnose-info', diagnoseItems)
                      .data('client-id', clientId)
                      .data('diagnose-name', diagnoseName);

                $diagnoseList.append(html).listview("refresh").trigger("updatelayout");

                var diagnoseId = row.id;

                DiagnoseTabFunctionality
                  .getDiagnoseClassificationUtilitiesService()
                  .categorizeDiagnoseItems(clientId, diagnoseId, diagnoseItems)
                  .then(function (allDiagnoseItems) {
                    _updateDiagnoseListOnUI(clientId, diagnoseId, allDiagnoseItems);
                  });

              });
              $('#defaultPage').enhanceWithin();

            });
            $('#defaultPage').enhanceWithin();
          });
        }
      });
  }

  /**

  Function: _updateUIandDBWithDiagnoseAndClassificationData

  Role:
        Inserts all Diagnose Item Details and Categories Details in DB
        This is called from Diagnose Tab
  **/

  function _updateUIandDBWithDiagnoseAndClassificationData(clientId, diagnoseId, diagnoseName,
                                   _newDiagnose, SelectedControls)
  {
    var diagnoseItemDetailsArray = [];

    $.each(SelectedControls, function (key, selectedControlDetails) {

      // console.log(selectedControlDetails);



      diagnoseItemDetailsArray.push({
        "toInsert"        : [
                              diagnoseId,
                              key,
                              selectedControlDetails.controlLabel,
                              selectedControlDetails.type,
                              selectedControlDetails.valueLabel,
                              selectedControlDetails.value],
        "diagnoseDetail"  : {
                              "controlId"           : selectedControlDetails.controlId,
                              "diagnoseId"          : diagnoseId,
                              "controlLabel"        : selectedControlDetails.controlLabel,
                              "controlValueLabel"   : selectedControlDetails.valueLabel,
                              "controlValue"        : selectedControlDetails.value,
                              "categorieschildren"  : selectedControlDetails.categoriesInfo
                            }
     });
    });

    var diagnoseItemDetailsArraySet = _.pluck(diagnoseItemDetailsArray, 'toInsert');

    DiagnoseTabFunctionality
      .getDiagnoseDataService()
      .insertDiagnoseDataBatch(diagnoseItemDetailsArraySet)
      .then(function(resultDiagnoseItemIdArray) {

        _insertCategorizationInfo(diagnoseItemDetailsArray, resultDiagnoseItemIdArray,
                                  clientId, diagnoseId, diagnoseName,
                                  _newDiagnose)
      });
  }

  function _insertCategorizationInfo(diagnoseItemDetailsArray,
                                      resultDiagnoseItemIdArray,
                                      clientId,
                                      diagnoseId,
                                      diagnoseName,
                                      _newDiagnose) {

    var diagnoseClassificationDataCollection = [];
    $.each(diagnoseItemDetailsArray, function (i, diagnoseItemDetails) {
      diagnoseItemDetails.diagnoseDetail.diagnoseItemId = resultDiagnoseItemIdArray[i]

      var categorizationMap = {};

      $.each(diagnoseItemDetails.diagnoseDetail.categorieschildren, function (k, categoryDetails) {
        if (categoryDetails.properties.value) {
          categorizationMap[categoryDetails.properties.name] = [];
          categorizationMap[categoryDetails.properties.name].push(categoryDetails.properties.name);
          diagnoseClassificationDataCollection.push([diagnoseItemDetails.diagnoseDetail.diagnoseItemId,
                                              categoryDetails.properties.classificationInsertId]);
          if (categoryDetails.categorieschildren !== undefined) {

            var categorizationInfoArray = categorizationMap[categoryDetails.properties.name];
            var diagnoseItemId = diagnoseItemDetails.diagnoseDetail.diagnoseItemId;

            ClassifyTabFunctionality
              .getClassificationUtilitiesService()
              .constructDiagnoseClassificationCollection(diagnoseItemId,
                                     categoryDetails.categorieschildren,
                                     diagnoseClassificationDataCollection,
                                     categorizationInfoArray);
          }
        }
      });
      diagnoseItemDetails.categorizationMap = categorizationMap;
    });

    DiagnoseTabFunctionality
      .getDiagnoseClassificationDataService()
      .insertDiagnoseClassificationData(diagnoseClassificationDataCollection)
      .then(function (resultClassificationIdArray) {

        var diagnoseItemsRows = _.pluck(diagnoseItemDetailsArray, 'diagnoseDetail');

        _putDiagnoseDetailsForClient(clientId, diagnoseId, diagnoseName,
                                     diagnoseItemsRows, _newDiagnose);

        DiagnoseTabFunctionality
          .getDiagnoseClassificationUtilitiesService()
          .categorizeDiagnoseItems(clientId, diagnoseId, diagnoseItemsRows)
          .then(function (diagnoseItemsCategoryInfo) {

            _updateDiagnoseListOnUI(clientId, diagnoseId, diagnoseItemsCategoryInfo);
          });
      });
  }

  function _putDiagnoseDetailsForClient(clientId, diagnoseId, diagnoseName,
                                         diagnoseItems, newDiagnose) {

    var $diagnoseDetailsCollapsibleSet = $('.js-diagnose-details', $('.js-client-details[data-client-id="' + clientId + '"]'));
    if (newDiagnose == true) {

      var panelHtml = _getDiagnosePanelHtml(diagnoseId, diagnoseName, clientId)

      $diagnoseDetailsCollapsibleSet.append(panelHtml).collapsibleset().collapsibleset( "refresh" );
    }

    $("#" + "diagnoseList" + clientId + diagnoseId)
        .data('diagnose-info', diagnoseItems).data('client-id', clientId)
        .html('').append(_getHtmlFromDiagnoseList(diagnoseItems))
        .listview().listview("refresh").trigger("updatelayout");
  }

  function _updateDiagnoseListOnUI(clientId, diagnoseId, diagnoseItemsCategoryInfo) {
    //console.log(allDiagnoseItems);

    var classifiedLists = {};
    var classifiedListsHeader = {};

    for (itemKey in diagnoseItemsCategoryInfo) {

      var item = diagnoseItemsCategoryInfo[itemKey];

      for (category in item.categorizationMap) {
        var categorizationMapItem = item.categorizationMap[category];

        if (categorizationMapItem === undefined) continue;

        // console.log(categorizationMapItem);

        var categorizationStr = categorizationMapItem.join(' : ');
        var listItemHtml = '<li  data-role="list-divider" style="font-weight:bold">'
                    + categorizationStr + '</li>';

        if (classifiedListsHeader[categorizationStr] === undefined) {
          classifiedListsHeader[categorizationStr] = listItemHtml;
        }

        if (classifiedLists[categorizationStr] === undefined) {
          classifiedLists[categorizationStr] = [];
        }
        classifiedLists[categorizationStr].push('<li>' + item.name + '</li>');
        item.categorized = true;
      }
    }

    var allHtml = "";
    for (classifiedItem in classifiedListsHeader) {
      allHtml += classifiedListsHeader[classifiedItem];
      allHtml += classifiedLists[classifiedItem].join('');
    }

    var $diagnoseList = $('#diagnoseList' + clientId + diagnoseId);

    $diagnoseList.html(allHtml);

    var unclassifiedHeaderAdded = false;
    $.each(diagnoseItemsCategoryInfo, function (key, item) {
      if (item.categorized === true) return;

      if (!unclassifiedHeaderAdded) {
        $diagnoseList.append('<li data-role="list-divider" style="font-weight: bold">Unclassified</li>');
        unclassifiedHeaderAdded = true;
      }
      $diagnoseList.append('<li>' + item.name + '</li>');
    });

    $diagnoseList.listview().listview("refresh").trigger("updatelayout");

    FunctionalityModule.enhancePage();
  }

  function _getDiagnosePanelHtml(diagnoseId, diagnoseName, clientId) {
    var panelHtml = getHtmlFromTemplate('#collapsiblePanelForClientDiagnoseTemplate',
                                        {   "properties": {
                                              "heading": diagnoseName,
                                              "clientId": clientId,
                                              "id": diagnoseId,
                                              "uniqueDiagnoseListId": "diagnoseList" + clientId + diagnoseId,
                                              "classes": FunctionalityModule.getClassificationCount() > 0 ?
                                                        "js-classify-diagnose-button":"js-classify-diagnose-button ui-disabled"
                                            }
                                          });
    return panelHtml;
  }

  function _getHtmlFromDiagnoseList(diagnoseItems) {

    return $.map(diagnoseItems, function (item, i) {
      var itemHtml = '<li data-diagnose-item-id="' + item.diagnoseItemId
                          + '" data-diagnose-id="' + item.diagnoseId + '">' + item.controlLabel + ' : '
                          + item.controlValueLabel + '</li>';
      return itemHtml;
    }).join("");
  }

  return self;
} (jQuery);
var DiagnoseTabFunctionality=function(h,i){var n={initialize:z,resetForm:y,makeActive:t,makeInactive:j,loadDiagnoseDataToHtml:v,fetchAndSetAllDiagnoseData:c,setDiagnoseClientId:u,clearDiagnoseTabs:d,addContainerToDiagnoseTabArea:o,saveDiagnoseData:g,setDiagnoseDataService:function(D){m=D},getDiagnoseDataService:q,setDiagnoseClassificationDataService:function(D){b=D},getDiagnoseClassificationDataService:function(D){return b},setDiagnoseClassificationUtilitiesService:function(D){s=D},getDiagnoseClassificationUtilitiesService:function(D){return s}};var k=null,r=null,w=true,A=null,C=null,p=null,x=null,l=null,e=null,a=false,f=0,m=null,b=null,s=null;function z(){k=h("#diagnoseTabArea");r=h("#defaultPage");x=h("#diagnoseId");l=h("#diagnoseIdForClient");C=h("#diagnoseTabHeader");A=h("#clientTabHeader");p=h("#tabs");e=h("#diagnose #clientId");c();B()}function B(){}function q(D){return m}function u(D){e.val(D)}function g(E){console.log(E);var D=e.val();if(D===""){alert("Please select a client first");return}var F="Diagnose: "+l.val()+", "+(new Date()).toLocaleString();if(w==true){DataModule.executeQuery({tableQueryReference:["clientDiagnoseData","insertData","insert"],queryParametersArray:[D,l.val(),F,(new Date()).toDateString()]}).promise().then(function(H){var I=H;ClientTabFunctionality.updateUIandDBWithDiagnoseAndClassificationData(D,I,F,w,E.SelectedControls);ClientTabFunctionality.makeActive();j()})}else{var G=x.val();DiagnoseTabFunctionality.getDiagnoseClassificationUtilitiesService().deleteDiagnoseDataAndClassification(G).then(function(){ClientTabFunctionality.updateUIandDBWithDiagnoseAndClassificationData(D,G,F,w,E.SelectedControls);ClientTabFunctionality.makeActive();j();w=true})}}function t(){p.tabs("option","active",1);h("#mainTabHeader",p).find(".ui-btn-active").removeClass("ui-btn-active");C.addClass("ui-btn-active").removeClass("ui-disabled")}function j(){C.removeClass("ui-btn-active");C.addClass("ui-disabled")}function y(){if(!m){return}m.resetControls(FunctionalityModule.getSharedDataService().getControls()[0]);var D=angular.element(h("#DiagnoseController")).scope();D.$digest();FunctionalityModule.enhancePage()}function v(E,K,D){u(E);w=false;var G=FunctionalityModule.getSharedDataService().getControls();if(D===i){return}FunctionalityModule.getSharedDataService().setIsControlsValuesBeingSet(true);h.each(D,function(M,L){m.setControlValue(G,L)});var I=angular.element(h("#DiagnoseController")).scope();var H=0;var F=false;var J=I.$watch(function(){if(F){return}F=true;I.$$postDigest(function(){F=false;if(H++<1){setTimeout(function(){FunctionalityModule.enhancePage()},1)}else{J();FunctionalityModule.getSharedDataService().setIsControlsValuesBeingSet(false)}})})}function c(D){DataModule.execute("diagnoseControls","selectData",[],function(E){var F=E.rows;if(F===i){return}var G=-1;h.each(F,function(K,L){var J=L.id;var I={tabName:L.diagnoseName,subTabName:L.subTabName,tabIndex:L.tabIndex,subTabIndex:L.subTabIndex,insertId:L.id,fileName:L.diagnoseControlFile,fileContent:L.diagnoseControlFileContent,jsonData:JSON.parse(L.diagnoseControlFileContent),classify:L.classify==="true"?true:false};if(L.tabIndex>G){G=L.tabIndex}TabsModule.buildTabSubTabData(I)});o();AddDiagnoseFromJsonFunctionality.setDiagnoseTabConfigIndex(G);var H=TabsModule.getTabSubtabArray();if(D===i||D===true){h.each(H,function(J,I){AddDiagnoseFromJsonFunctionality.addDiagnoseTabConfig(I)})}})}function o(){var D=angular.element(h("#DiagnoseController")).scope();FunctionalityModule.getSharedData().controls.push(TabsModule.getAllTabSubtabData());D.$digest()}function d(){h("tabs, .categories-tabs",k).each(function(E,D){var F=h(D);var G=F.data("tabs-initialized");if(G==="true"){F.tabs("destroy");F.data("tabs-initialized","false")}});h("#ControlsContainer").html("")}return n}(jQuery);var ClassifyTabFunctionality=function(f,c){var m={initialize:e,makeActive:j,makeInactive:i,editDiagnoseItemsCategory:g,setClassificationUtilitiesService:function(n){a=n},getClassificationUtilitiesService:function(n){return a}};var d=null,h=null,l=null,k=null,a=null;function e(){d=f("#classificationTabHeader");h=f("#tabs");l=f("#classification");k=f("#classificationTabContent");b()}function b(){}function j(){h.tabs("option","active",2);f("#mainTabHeader",h).find(".ui-btn-active").removeClass("ui-btn-active");d.addClass("ui-btn-active").removeClass("ui-disabled")}function i(){d.removeClass("ui-btn-active").addClass("ui-disabled")}function g(n,q,p,o,r){FunctionalityModule.getSharedDataService().setRecentlySelectedControlDetails();r.then(function(w){var u=angular.element(f("#ClassificationListController")).scope();u.data.clientId=n;u.data.diagnoseId=q;u.data.diagnoseName=p;u.data.diagnoseItems=o;var t=0;var s=false;var v=u.$watch(function(){if(s){return}s=true;u.$$postDigest(function(){s=false;if(t++<2){setTimeout(function(){FunctionalityModule.enhancePage();ClassifyTabFunctionality.makeActive()},1)}else{v()}})})})}return m}(jQuery);var ConfigTabFunctionality=function(d,e){var h={initialize:s,resetForm:r,getAppRefreshPending:function(){return a},setAppRefreshPending:function(t){a=t?t:true}};function s(){q();n()}var j=null,i=null,c=null,a=false;function q(){j=d("#diagnoseConfig");i=d("#allClassificationNames");c=d("#classificationName");AddDiagnoseFromJsonFunctionality.initialize()}function n(){d(function(){d("#dropDBStructureButton").on("click",function(){DataModule.dropAllTables();r();ClientTabFunctionality.resetTab()});d("#loadTestClientDataButton").on("click",function(){DataModule.insertTestData(clientList,l)});d("#createDBButton").on("click",function(){DataModule.createAllTables(l)});d("#dbExportDataButton").on("click",function(){var t=o()})})}function p(u,t){if(t){u+=1462}var w=Date.parse(u);return(w-new Date(Date.UTC(1899,11,30)))/(24*60*60*1000)}function f(z,y){var u={};var v={s:{c:10000000,r:10000000},e:{c:0,r:0}};for(var x=0;x!=z.length;++x){for(var A=0;A!=z[x].length;++A){if(v.s.r>x){v.s.r=x}if(v.s.c>A){v.s.c=A}if(v.e.r<x){v.e.r=x}if(v.e.c<A){v.e.c=A}var t={v:z[x][A]};if(t.v==null){continue}var w=XLSX.utils.encode_cell({c:A,r:x});if(typeof t.v==="number"){t.t="n"}else{if(typeof t.v==="boolean"){t.t="b"}else{if(t.v instanceof Date){t.t="n";t.z=XLSX.SSF._table[14];t.v=p(t.v)}else{t.t="s"}}}u[w]=t}}if(v.s.c<10000000){u["!ref"]=XLSX.utils.encode_range(v)}return u}var g="Sheet";function m(){if(!(this instanceof m)){return new m()}this.SheetNames=[];this.Sheets={}}function k(w){var u=new ArrayBuffer(w.length);var t=new Uint8Array(u);for(var v=0;v!=w.length;++v){t[v]=w.charCodeAt(v)&255}return u}function o(){DataModule.execute("clientData","selectData",[],function(y){var D={"ClientData.csv":{data:"Client Id, Client Name\n",type:"text/csv"}};var v=new m();var u="ClientData.csv";var w=y.rows;var B={};var A={s:{c:10000000,r:10000000},e:{c:0,r:0}};for(var x=0;x!=w.length;++x){var t=0;d.each(w[x],function(E,G){if(A.s.r>x){A.s.r=x}if(A.s.c>t){A.s.c=t}if(A.e.r<x){A.e.r=x}if(A.e.c<t){A.e.c=t}var C={v:w[x][E]};if(C.v==null){return}var F=XLSX.utils.encode_cell({c:t,r:x});if(typeof C.v==="number"){C.t="n"}else{if(typeof C.v==="boolean"){C.t="b"}else{if(C.v instanceof Date){C.t="n";C.z=XLSX.SSF._table[14];C.v=p(C.v)}else{C.t="s"}}}B[F]=C;t++})}if(A.s.c<10000000){B["!ref"]=XLSX.utils.encode_range(A)}v.SheetNames.push(g);v.Sheets[g]=B;var z=XLSX.write(v,{bookType:"xlsx",bookSST:true,type:"binary"});saveAs(new Blob([k(z)],{type:"application/octet-stream"}),"ClientData.xlsx");return B})}function b(){DataModule.execute("clientData","selectData",[],function(y){var v={"ClientData.csv":{data:"Client Id, Client Name\n",type:"text/csv"}};var u="ClientData.csv";var x=",";d.each(y.rows,function(B,C){var D="";D+=C.id;D+=x;D+=C.name;D+=x;D+=C.age;D+=x;D+=C.dateHourOfBirth;D+=x;D+=C.sex;D+=x;D+=C.address.replace("\n","").replace(","," ");D+=x;D+=C.phone;D+=x;D+=C.email;D+="\n";v[u].data+=D});var w=new File([v[u].data],u,{type:v[u].type,lastModified:Date.now()});var t=URL.createObjectURL(w,{oneTimeOnly:true});var z=document.createElement("a");z.href=t;z.download=u;z.textContent=u;var A=document.createElement("li");A.appendChild(z);d("#dbSection #filesForDownload").append(A)})}function r(){d("ul",j).html("");i.html("")}function l(t){d("#configEventsMessages").show().find("ul").append('<li class="ui-icon-home">'+t+"</li>").listview("refresh").trigger("updatelayout");setTimeout(function(){d("#configEventsMessages").fadeOut(1000,function(){d(this).find("ul").html("")})},2000)}return h}(jQuery);var ClassifyTabFunctionality=function(f,c){var m={initialize:e,makeActive:j,makeInactive:i,editDiagnoseItemsCategory:g,setClassificationUtilitiesService:function(n){a=n},getClassificationUtilitiesService:function(n){return a}};var d=null,h=null,l=null,k=null,a=null;function e(){d=f("#classificationTabHeader");h=f("#tabs");l=f("#classification");k=f("#classificationTabContent");b()}function b(){}function j(){h.tabs("option","active",2);f("#mainTabHeader",h).find(".ui-btn-active").removeClass("ui-btn-active");d.addClass("ui-btn-active").removeClass("ui-disabled")}function i(){d.removeClass("ui-btn-active").addClass("ui-disabled")}function g(n,q,p,o,r){FunctionalityModule.getSharedDataService().setRecentlySelectedControlDetails();r.then(function(w){var u=angular.element(f("#ClassificationListController")).scope();u.data.clientId=n;u.data.diagnoseId=q;u.data.diagnoseName=p;u.data.diagnoseItems=o;var t=0;var s=false;var v=u.$watch(function(){if(s){return}s=true;u.$$postDigest(function(){s=false;if(t++<2){setTimeout(function(){FunctionalityModule.enhancePage();ClassifyTabFunctionality.makeActive()},1)}else{v()}})})})}return m}(jQuery);var AddDiagnoseFromJsonFunctionality=function(e,b){var o={initialize:f,addDiagnoseTabConfig:n,setDataControls:function(q){h=q},setDiagnoseTabConfigIndex:function(q){l=q}};var g=null,l=-1,h=null,c=[];function f(){i();a()}function i(){g=e("#diagnoseConfig")}function a(){g.on("click",".js-save-button",function(){var s=e(this).closest(".js-new-diagnose-container");var r=s.data("diagnose-tab-config-index");var q=s.find(".js-diagnose-name").val();k(r,q);ConfigTabFunctionality.setAppRefreshPending(true)});g.on("change",".js-diagnose-file",function(u){var t=e(this);var r=t[0].files[0];if(r!==b){var w=t[0].files[0].name;var q=t.data("diagnose-tab-config-index");var s=t.data("diagnose-tab-subtabfile-index");var v='.js-diagnose-file-name[data-diagnose-tab-config-index="'+q+'"][data-diagnose-tab-subtabfile-index="'+s+'"]';if(e(v).val()===""){e(v).val(w.replace(".json",""))}}});g.on("click",".js-delete-button",function(){var s=ClientTabFunctionality.getSelectedClient();var r=e(this);var q=r.data("diagnose-tab-config-index");DataModule.execute("diagnoseControls","selectDataWhere",[q],function(t){var u=t.rows;if(u===b){return}e.each(u,function(v,w){DataModule.executeQuery({tableQueryReference:["diagnoseData","deleteDataWhere","delete"],queryParametersArray:["diagnoseTab"+w.tabIndex+"diagnoseSubTab"+w.subTabIndex]})})});DataModule.executeQuery({tableQueryReference:["diagnoseControls","deleteDataWhere","delete"],queryParametersArray:[q]}).promise().then(function(){r.closest(".js-tab-details-container").slideUp(1000,function(){e(this).remove()});if(s!==""){}TabsModule.removeTab(q);DiagnoseTabFunctionality.clearDiagnoseTabs();DiagnoseTabFunctionality.fetchAndSetAllDiagnoseData(false)})});g.on("click",".js-add-subtab-button",function(){var q=e(this).data("diagnose-tab-config-index");j(q)});e("#addDiagnoseTabButton").on("click",function(){n()})}function n(r){if(r===b){r={tabIndex:++l};var q=[{tabIndex:r.tabIndex,subTabIndex:0,isNewDiagnoseFile:true}];r.subTabsArray=q}else{l=r.tabIndex}if(c[r.tabIndex]===b){c[r.tabIndex]=[];e.each(r.subTabsArray,function(s,t){if(c[r.tabIndex].indexOf(t.subTabIndex)===-1){c[r.tabIndex].push(t.subTabIndex)}})}e("#diagnoseConfig ul").append(getHtmlFromTemplate("#configEntryItemTemplate",r));FunctionalityModule.enhancePage();e.each(r.subTabsArray,function(t,v){var s='[data-diagnose-tab-config-index="'+v.tabIndex+'"][data-diagnose-tab-subtabfile-index="'+v.subTabIndex+'"]';var u=".categorize-subtab-flipswitch"+s;e(u).prop("checked",v.classify).flipswitch("refresh")})}function j(r){e("#newDiagnoseContainer"+r).data("has-subtabs",true);var t=c[r];var q=Math.max.apply(null,t);q++;t.push(q);var s=getHtmlFromTemplate("#configEntryFileInputTemplate",{tabIndex:r,subTabIndex:q,isNewDiagnoseFile:true});e("#diagnoseControlsFilesContainer"+r).append(s);FunctionalityModule.enhancePage()}function k(r,q){e.each(c[r],function(s,t){p(r,q,t)})}function p(B,D,v){var C='[data-diagnose-tab-config-index="'+B+'"][data-diagnose-tab-subtabfile-index="'+v+'"]';var r='.js-diagnose-file[type="file"]'+C;var t=e(r)[0].files[0];var A=".categorize-subtab-flipswitch"+C;var z=e(A).prop("checked");var s=".js-subtab"+C;var y=e(s),q=y.data("insert-id");var q=y.data("insert-id");var u=".js-diagnose-file-name"+C;var w=e(u).val();var x=y.data("is-new-diagnose-file");if(q!==b&&q!==""&&t===b){m(B,v,D,w,z,q)}if(t===b){return}FileModule.readFile(t,function(E){if(x){DataModule.execute("diagnoseControls","insertData",[B,v,D,w,t.name,E,z],function(G){var F=G.insertId;y.data("insert-id",F);d({diagnoseSectionName:D,subTabName:w,tabIndex:B,insertId:F,subTabIndex:v,action:"insert",fileName:t.name,fileContent:E,classify:z})})}else{DataModule.execute("diagnoseControls","updateFileData",[B,v,D,w,t.name,E,z,q],function(F){d({diagnoseSectionName:D,subTabName:w,tabIndex:B,insertId:q,subTabIndex:v,action:"update",fileName:t.name,fileContent:E,classify:z})},"update")}});if(x===true){y.data("is-new-diagnose-file",false)}}function m(r,v,q,s,u,t){DataModule.execute("diagnoseControls","updateData",[q,s,u,t],function(){d({diagnoseSectionName:q,subTabName:s,tabIndex:r,subTabIndex:v,classify:u,action:"update"})},"update")}function d(D){var C=D.diagnoseSectionName,w=D.subTabName,r=D.tabIndex,t=D.action,q=D.insertId,v=D.subTabIndex,s=D.fileContent,u=D.fileName,A=D.classify,B=null;if(t==="update"){var z=TabsModule.getTabDetails(r);var y=TabsModule.getTabSubtabDetails(r,v);z.tabName=C;if(u!==b&&u!==""){y.fileName=u}else{if(u===b||u===""){u=y.fileName}}if(s===b){B=y.jsonData}else{B=JSON.parse(s);y.jsonData=B}}if(t==="insert"){if(s!==b){B=JSON.parse(s)}}var x={tabName:C,subTabName:w,tabIndex:r,subTabIndex:v,insertId:q,fileName:u,fileContent:s,jsonData:B,classify:A};TabsModule.buildTabSubTabData(x);DiagnoseTabFunctionality.clearDiagnoseTabs();DiagnoseTabFunctionality.addContainerToDiagnoseTabArea()}return o}(jQuery);
var FunctionalityModule = function ($, ClientTabFunctionality, DataModule, FileModule, TabsModule, undefined) {
  var self = {
    initialize: _initialize,
    enhancePage: _enhancePage,
    getClassificationCount: _getClassificationCount,
    //getClassificationAtId: _getClassificationAtId,
    getSharedData: function () { return _sharedData; },
    setSharedData: function (s) {
      _sharedData = s;
    },
    getSharedDataService: function () {
      return _SharedDataService;
    },
    setSharedDataService: function (s) {
      _SharedDataService = s;
    }
  };

  var _$classificationTabs = null,
      _$diagnoseConfig = null,
      _$defaultPage = null,
      _classificationTabsHtml = null,
      _tabTemplate = "<li><a href='#{href}'>#{label}</a></li>",
      _classificationTabCounter = 0,
      _classificationNames = [],
      _classificationIndexer = {},
      _sharedData = null,
      _SharedDataService = null;


  function _initialize() {

    $.each(tabsControls.children, function(i, tabControl) {
      if ($('[href="#' + tabControl.properties.id + '"]').length <= 0) {
        tabControlsToAdd.children.push(tabControl);
      }
    });

    $('#tabs [data-role="navbar"] ul').append(getHtmlFromTemplate("#tabItemTemplate",
                                                                  tabControlsToAdd.children));

    $mainTabContainer = $('#diagnoseTabArea');

   // $('#defaultPage').enhanceWithin();
    $('#tabs').tabs();

    _$defaultPage = $('#defaultPage');
    _$classificationTabs = $("#classificationTabs");

    _classificationTabsHtml = _$classificationTabs.html();
    _classificationTabCounter = _$classificationTabs.find("#tabHeader li").length;
    _$classificationTabs.tabs();

    ClientTabFunctionality.initialize();
    ClassifyTabFunctionality.initialize();
    DiagnoseTabFunctionality.initialize();
    ConfigTabFunctionality.initialize();

    _bindUIEvents();
  }

  function _enhancePage() {
    if (_$defaultPage === null) return;
    _$defaultPage.enhanceWithin();
  }

  // addTab function: adds new tab
  function addTab(tabTitle) {
    _$classificationTabs.tabs("destroy");
    _$classificationTabs.html(_classificationTabsHtml);

    var label = tabTitle || "Tab " + _classificationTabCounter,
      id = "tabs-" + _classificationTabCounter,
      li = $( _tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
      tabContentHtml = "<ul id='" + id + "' class='tablist-content' data-role='listview' data-inset='true'>No diagnose items in " + label + "</li>";

    _$classificationTabs.find( ".ui-tabs-nav" ).append( li );
    _$classificationTabs.append(tabContentHtml);
    _classificationTabsHtml = _$classificationTabs.html();
    _$classificationTabs.tabs().tabs("refresh").tabs("option", "active", _classificationTabCounter);;
    _classificationTabCounter++;
  }

  function _bindUIEvents() {

    $('#content').on("tabsactivate", "#tabs", function (event, ui) {
      if (ui.oldPanel.selector === "#config"
          && ConfigTabFunctionality.getAppRefreshPending()) {
        console.log('config tab');
        $('[data-url]' ).remove();
        window.location.reload();
      }
      //console.log(event, ui);
    });

    $('#diagnoseTabArea').on('change', 'input', function () {
      var clientId = $('#clientId').val();
      if (clientId !== "") {
        $('#saveDiagnoseChanges').removeClass('ui-disabled');
      }
    });
  }

  function _loadDiagnoseList(clientId, callback) {
    DataModule.getDiagnoseList(clientId, callback);
  }

  function _traverseClassificationData(classificationData, id) {
    var classDetailsReturn = null;
    for (classDetails of classificationData) {
      if (classDetails.data.classificationInsertId === id) {
        classDetailsReturn = classDetails;
        break;
      }

      if (classDetails.categorieschildren !== undefined) {
        classDetailsReturn = _traverseClassificationData(classDetails.categorieschildren, id);
        if (classDetailsReturn !== null) {
          break;
        }
      }
    };
    return classDetailsReturn;
  }

  function _getClassificationCount() {
    return _sharedData.classificationData.length;
  }

  return self;

} (jQuery, ClientTabFunctionality, DataModule, FileModule, TabsModule);

var controlFileName="";var templateItemCount=0;var firstId="";var toggleSwitchCounter=0;var idManager={};$.addTemplateFormatter({logValue:function(b,a){console.log(b);return b},prependChars:function(b,a){if(b===undefined){return}return a+b},controlType:function(b,a){switch(b){case"TextInput":return"text";case"datetime-local":return"datetime-local";default:return"text"}},getUniqueProperty:function(d,c){var a=controlFileName.split("/");var b=a[a.length-1];b=b.replace(".","");if(d===undefined&&c==="toggleSwitch"){toggleSwitchCounter++;for(i=toggleSwitchCounter;i<200;i++){if($("#"+b+c+i).length<=0){toggleSwitchCounter=i;break}}d=c+toggleSwitchCounter}else{if(d===undefined){if(idManager[c]===undefined){idManager[c]=0}else{idManager[c]+=1}for(i=idManager[c];i<200;i++){if($("#"+b+c+i).length<=0){idManager[c]=i;break}}d=c+idManager[c]}}return b+d},getFirstName:function(a){if(templateItemCount===0){firstId=a}templateItemCount++;return firstId}});var defaultTabsControls={children:[{type:"tab",properties:{heading:"Diagnose",id:"diagnose",appendToId:"diagnoseTabArea"},controlsFiles:[],tabType:"diagnose",convertAccordionToTab:false}]};function getHtmlFromTemplate(a,c){if(a===""){return""}$("#htmlContent").loadTemplate(a,c,{ignoreUndefined:true,ignoreNull:true,ignoreEmptyString:true});var b=$("#htmlContent").html();$("#htmlContent").html("");templateItemCount=0;return b}var textControlText="";var tabsControls=defaultTabsControls;var tabControlsToAdd={};tabControlsToAdd.children=[];$(function(){FunctionalityModule&&FunctionalityModule.initialize()});DataModule.initialize();DataModule.createAllTables();$(document).bind("mobileinit",function(){$.mobile.ajaxEnabled=false;$.mobile.linkBindingEnabled=false;$.mobile.hashListeningEnabled=false;$.mobile.pushStateEnabled=false});